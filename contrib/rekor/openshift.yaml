apiVersion: v1
kind: List
metadata: {}
items:
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: rekor-server
    app: rekor
  spec:
    lookupPolicy:
      local: true
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    name: rekor-server
    labels:
      app: rekor
  spec:
    source:
      type: Git
      git:
        uri: https://github.com/sigstore/rekor
    strategy:
      type: Docker                      
      dockerStrategy:
        dockerfilePath: Dockerfile    # Look for Dockerfile in: gitUri/contextDir/dockerfilePath
    output:
      to:
        kind: ImageStreamTag
        name: rekor-server:latest
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert --stdout
      kompose.version: 1.22.0 (955b78124)
    creationTimestamp: null
    labels:
      io.kompose.service: rekor-server
      app: rekor
    name: rekor-server
  spec:
    ports:
      - name: "3000"
        port: 3000
        targetPort: 3000
      - name: "2112"
        port: 2112
        targetPort: 2112
    selector:
      io.kompose.service: rekor-server
  status:
    loadBalancer: {}
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: rekor
    name: rekor-server
  spec:
    port:
      targetPort: 3000
    to:
      kind: Service
      name: rekor-server
      weight: 100
    wildcardPolicy: None
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: Edge
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert --stdout
      kompose.version: 1.22.0 (955b78124)
    creationTimestamp: null
    labels:
      io.kompose.service: trillian-log-server
    name: trillian-log-server
  spec:
    ports:
      - name: "8090"
        port: 8090
        targetPort: 8090
      - name: "8091"
        port: 8091
        targetPort: 8091
    selector:
      io.kompose.service: trillian-log-server
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert --stdout
      kompose.version: 1.22.0 (955b78124)
    creationTimestamp: null
    labels:
      io.kompose.service: trillian-log-signer
    name: trillian-log-signer
  spec:
    ports:
      - name: "8092"
        port: 8092
        targetPort: 8091
    selector:
      io.kompose.service: trillian-log-signer
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert --stdout
      kompose.version: 1.22.0 (955b78124)
    creationTimestamp: null
    labels:
      app.kubernetes.io/name: mariadb
      app.kubernetes.io/part-of: rekor
      io.kompose.service: mysql
    name: mysql
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: mysql
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert --stdout
          kompose.version: 1.22.0 (955b78124)
        creationTimestamp: null
        labels:
          io.kompose.service: mysql
      spec:
        containers:
          - env:
              - name: MYSQL_DATABASE
                value: test
              - name: MYSQL_PASSWORD
                value: zaphod
              - name: MYSQL_ROOT_PASSWORD
                value: zaphod
              - name: MYSQL_USER
                value: test
            image: gcr.io/trillian-opensource-ci/db_server:5e12fb368c8fd19e10aeb5a5cf785107f8069c08
            livenessProbe:
              exec:
                command:
                  - /etc/init.d/mysql
                  - status
              failureThreshold: 3
              initialDelaySeconds: 10
              periodSeconds: 30
              timeoutSeconds: 3
            name: mysql
            ports:
              - containerPort: 3306
            resources: {}
        restartPolicy: Always
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      io.kompose.service: mysql
      app: rekor
    name: mysql
  spec:
    ports:
      - name: mysql
        port: 3306
        targetPort: 3306
    selector:
      io.kompose.service: mysql
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert --stdout
      kompose.version: 1.22.0 (955b78124)
    creationTimestamp: null
    labels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/part-of: rekor
      io.kompose.service: redis-server
    name: redis-server
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: redis-server
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert --stdout
          kompose.version: 1.22.0 (955b78124)
        creationTimestamp: null
        labels:
          io.kompose.service: redis-server
      spec:
        containers:
          - args:
              - --bind
              - 0.0.0.0
              - --appendonly
              - "yes"
            image: docker.io/redis:5.0.10
            livenessProbe:
              exec:
                command:
                  - redis-cli
                  - ping
              failureThreshold: 3
              initialDelaySeconds: 5
              periodSeconds: 10
              timeoutSeconds: 3
            name: redis-server
            ports:
              - containerPort: 6379
            resources: {}
        restartPolicy: Always
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      io.kompose.service: redis-server
      app: rekor
    name: redis-server
  spec:
    ports:
      - name: redis
        port: 6379
        targetPort: 6379
    selector:
      io.kompose.service: redis-server
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert --stdout
      kompose.version: 1.22.0 (955b78124)
      app.openshift.io/connects-to: '[{"apiVersion":"apps/v1","kind":"Deployment","name":"redis-server"}, {"apiVersion":"apps/v1","kind":"Deployment","name":"trillian-log-server"}]'
    creationTimestamp: null
    labels:
      app.kubernetes.io/name: rekor-server
      app.kubernetes.io/part-of: rekor
      io.kompose.service: rekor-server
    name: rekor-server
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: rekor-server
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert --stdout
          kompose.version: 1.22.0 (955b78124)
        creationTimestamp: null
        labels:
          io.kompose.service: rekor-server
      spec:
        containers:
          - args:
              - rekor-server
              - serve
              - --trillian_log_server.address=trillian-log-server
              - --trillian_log_server.port=8091
              - --redis_server.address=redis-server
              - --redis_server.port=6379
              - --rekor_server.address=0.0.0.0
              - --rekor_server.signer=memory
            image: rekor-server:latest  # Should use ImageStream
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                  - curl
                  - -f
                  - http://localhost:3000/ping
              failureThreshold: 3
              initialDelaySeconds: 5
              periodSeconds: 10
              timeoutSeconds: 3
            name: rekor-server
            ports:
              - containerPort: 3000
              - containerPort: 2112
            resources: {}
        restartPolicy: Always
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert --stdout
      kompose.version: 1.22.0 (955b78124)
    creationTimestamp: null
    labels:
      app.kubernetes.io/name: trillian-log-server
      app.kubernetes.io/part-of: rekor
      io.kompose.service: trillian-log-server
    name: trillian-log-server
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: trillian-log-server
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert --stdout
          kompose.version: 1.22.0 (955b78124)
        creationTimestamp: null
        labels:
          io.kompose.service: trillian-log-server
      spec:
        containers:
          - args:
              - --storage_system=mysql
              - --mysql_uri=test:zaphod@tcp(mysql:3306)/test
              - --rpc_endpoint=0.0.0.0:8091
              - --http_endpoint=0.0.0.0:8090
              - --alsologtostderr
            image: gcr.io/trillian-opensource-ci/log_server:5e12fb368c8fd19e10aeb5a5cf785107f8069c08
            name: trillian-log-server
            ports:
              - containerPort: 8090
              - containerPort: 8091
            resources: {}
        restartPolicy: Always
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert --stdout
      kompose.version: 1.22.0 (955b78124)
      app.openshift.io/connects-to: '[{"apiVersion":"apps/v1","kind":"Deployment","name":"mysql"}]'
    creationTimestamp: null
    labels:
      app.kubernetes.io/name: trillian-log-signer
      app.kubernetes.io/part-of: rekor
      io.kompose.service: trillian-log-signer
    name: trillian-log-signer
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: trillian-log-signer
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert --stdout
          kompose.version: 1.22.0 (955b78124)
        creationTimestamp: null
        labels:
          io.kompose.service: trillian-log-signer
      spec:
        containers:
          - args:
              - --storage_system=mysql
              - --mysql_uri=test:zaphod@tcp(mysql:3306)/test
              - --rpc_endpoint=0.0.0.0:8090
              - --http_endpoint=0.0.0.0:8091
              - --force_master
              - --alsologtostderr
            image: gcr.io/trillian-opensource-ci/log_signer:5e12fb368c8fd19e10aeb5a5cf785107f8069c08
            name: trillian-log-signer
            ports:
              - containerPort: 8091
            resources: {}
        restartPolicy: Always
  status: {}
